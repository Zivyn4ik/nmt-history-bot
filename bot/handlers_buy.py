import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject

from db import async_session_maker, get_or_create_user, User
from payments.wayforpay import create_invoice, check_status
from services import activate_subscription, remaining_days
from config import settings

router = Router(name="buy")

def pay_kb(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
        ]
    )

@router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_buy(message: Message):
    async with async_session_maker() as session:
        user = await get_or_create_user(session, message.from_user.id)

        # —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å
        try:
            order_ref, invoice_url = await create_invoice(user.id)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: {e}")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_reference (status=PENDING –Ω–µ —Ö—Ä–∞–Ω–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Å—Ç–∞—Ç—É—Å–æ–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–∞)
        user.order_reference = order_ref
        await session.commit()

        await message.answer(
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=pay_kb(invoice_url)
        )
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—Å –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî —Ç–∞–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞
        await message.answer("–û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑ Return-—Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É –±–æ—Ç–∞.")

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_check_afterpay(message: Message):
    async with async_session_maker() as session:
        user: User = await get_or_create_user(session, message.from_user.id)

        if not user.order_reference:
            # –ø—Ä–æ—Å—Ç–æ –æ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã
            if user.status == "ACTIVE":
                days = remaining_days(user)
                end = user.end_date.strftime("%d.%m.%Y") if user.end_date else "‚Äî"
                await message.answer(f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end} (–æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω.)")
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")
            return

        await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø‚Ä¶")

        # polling 35 —Å–µ–∫, —à–∞–≥ 1 —Å–µ–∫
        for _ in range(35):
            data = await check_status(user.order_reference)
            # –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –≤ WFP –∏–º–µ–µ—Ç transactionStatus=Approved
            status = data.get("transactionStatus") or data.get("orderStatus")
            if status and status.lower() == "approved":
                # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
                invite = await activate_subscription(message.bot, session, user)

                # –ß–∏—Å—Ç–∏–º order_reference (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã)
                user.order_reference = None
                await session.commit()

                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite}")
                return
            await asyncio.sleep(1)

        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ –û–ø–ª–∞—Ç—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –±–æ—Ç–∞ –∑ Return-—Å—Ç–æ—Ä—ñ–Ω–∫–∏.\n"
        "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø.\n"
        "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: –Ω–∞–ø–∏—à—ñ—Ç—å —É —á–∞—Ç –±–æ—Ç–∞."
    )
