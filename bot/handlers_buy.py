from __future__ import annotations

import logging
import uuid
import asyncio
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from bot.config import settings
from bot.db import Session, PaymentToken, Payment
from bot.payments.wayforpay import create_invoice
from bot.services import activate_or_extend

router = Router()
log = logging.getLogger("handlers.buy")


async def wait_for_payment(bot: Bot, user_id: int, token: str, timeout: int = 35):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ timeout —Å–µ–∫—É–Ω–¥.
    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    async with Session() as s:
        start_time = asyncio.get_event_loop().time()
        message: Message = await bot.send_message(user_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª‚Ä¶")
        while (asyncio.get_event_loop().time() - start_time) < timeout:
            res = await s.execute(
                select(PaymentToken).where(PaymentToken.token == token)
            )
            token_obj = res.scalar_one_or_none()
            if token_obj and token_obj.status == "paid":
                token_obj.status = "used"
                await s.commit()
                await message.delete()
                await activate_or_extend(bot, user_id)
                return True
            await asyncio.sleep(1)
        await message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –∑–∞ 35 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False


@router.message(Command("buy"))
async def cmd_buy(message: Message, bot: Bot):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω, Payment –æ–±—ä–µ–∫—Ç –∏ –∏–Ω–≤–æ–π—Å WayForPay.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç wait_for_payment –¥–ª—è –≤—ã–¥–∞—á–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    user_id = message.from_user.id
    token = uuid.uuid4().hex

    # 1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    try:
        async with Session() as session:
            session.add(PaymentToken(user_id=user_id, token=token, status="pending"))
            await session.commit()
        log.info("üîë Payment token —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, token)
    except Exception as e:
        log.exception("Failed to create payment token for user %s: %s", user_id, e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å WayForPay –∏ Payment
    try:
        url, order_ref = await create_invoice(
            user_id=user_id,
            amount=settings.PRICE,
            currency=settings.CURRENCY,
            product_name=getattr(settings, "PRODUCT_NAME", "Channel subscription (1 month)"),
            start_token=token,  # –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ /wfp/return?token=...
        )

        async with Session() as session:
            session.add(Payment(
                user_id=user_id,
                order_ref=order_ref,
                amount=settings.PRICE,
                currency=settings.CURRENCY,
                status="created",
            ))
            await session.commit()
    except Exception as e:
        log.exception("Failed to create invoice for user %s: %s", user_id, e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=url)]])
    await message.answer(
        "‚úÖ –†–∞—Ö—É–Ω–æ–∫ –Ω–∞ 1 –º—ñ—Å—è—Ü—å —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û–ø–ª–∞—Ç–∏—Ç–∏¬ª, –∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.",
        reply_markup=kb
    )

    # 4Ô∏è‚É£ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    await wait_for_payment(bot, user_id, token)
