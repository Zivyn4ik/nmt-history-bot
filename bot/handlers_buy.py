from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from bot.db import async_session_maker, get_or_create_user, User
from bot.services import activate_subscription, remaining_days
from bot.payments.wayforpay import create_invoice, check_status

router = Router(name="buy")

def pay_kb(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)]]
    )

@router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_buy(message: Message):
    async with async_session_maker() as session:
        user = await get_or_create_user(session, message.from_user.id)
        order_ref, invoice_url = await create_invoice(user.id)
        user.order_reference = order_ref
        await session.commit()
        await message.answer("üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=pay_kb(invoice_url))
        await message.answer("–û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑ Return-—Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É –±–æ—Ç–∞.")

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_check_afterpay(message: Message):
    async with async_session_maker() as session:
        user: User = await get_or_create_user(session, message.from_user.id)
        if not user.order_reference:
            if user.status == "ACTIVE":
                days = remaining_days(user)
                end = user.end_date.strftime("%d.%m.%Y") if user.end_date else "‚Äî"
                await message.answer(f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end} (–æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω.)")
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")
            return

        await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø‚Ä¶")
        for _ in range(35):
            data = await check_status(user.order_reference)
            status = data.get("transactionStatus") or data.get("orderStatus")
            if status and status.lower() == "approved":
                invite = await activate_subscription(message.bot, session, user)
                user.order_reference = None
                await session.commit()
                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite}")
                return
            await asyncio.sleep(1)
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –±–æ—Ç–∞."
    )
