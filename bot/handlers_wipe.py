from __future__ import annotations

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ChatType

from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

from bot.config import settings

import logging

log = logging.getLogger(__name__)
router = Router()

# –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª—ë–≥–∫–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø—Ä—è–º—ã—Ö SQL-–∫–æ–º–∞–Ω–¥
_engine = create_async_engine(settings.DATABASE_URL, future=True, echo=False)


async def _wipe_user_data(user_id: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Ç–∞–±–ª–∏—Ü—ã subscriptions.
    –í subscriptions –º—ã –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º 'expired' –∏ updated_at=NOW,
    —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å "—Å—Ç–∞—Ä—ã–µ" –∫–æ–ª–ª–±–µ–∫–∏ WayForPay.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    affected = 0
    async with _engine.begin() as conn:
        # –ø–µ—Ä–µ—á–µ–Ω—å —Ç–∞–±–ª–∏—Ü
        res = await conn.execute(text("SELECT name FROM sqlite_master WHERE type='table'"))
        tables = [r[0] for r in res if r[0] not in ("sqlite_sequence", "alembic_version")]

        for t in tables:
            if t == "subscriptions":
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–¥–µ—Å—å ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º UPSERT –Ω–∏–∂–µ
                continue

            # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ user_id (–µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –µ—Å—Ç—å)
            cols = await conn.execute(text(f'PRAGMA table_info("{t}")'))
            colnames = [row[1] for row in cols]
            if "user_id" in colnames:
                await conn.execute(text(f'DELETE FROM "{t}" WHERE user_id = :uid'), {"uid": user_id})
                affected += 1
            elif t in ("users", "user") and "id" in colnames:
                await conn.execute(text(f'DELETE FROM "{t}" WHERE id = :uid'), {"uid": user_id})
                affected += 1

        # subscriptions: —Å—Ç–∞–≤–∏–º "–º–µ—á—Ç—É" (expired) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º updated_at
        await conn.execute(text("""
            INSERT INTO subscriptions (user_id, status, paid_until, grace_until, last_reminded_on, updated_at)
            VALUES (:uid, 'expired', NULL, NULL, NULL, CURRENT_TIMESTAMP)
            ON CONFLICT(user_id) DO UPDATE SET
              status='expired',
              paid_until=NULL,
              grace_until=NULL,
              last_reminded_on=NULL,
              updated_at=CURRENT_TIMESTAMP
        """), {"uid": user_id})
        affected += 1

    return affected


@router.message(Command(commands=["unsubscribe", "wipe_me"]))
async def cmd_unsubscribe(message: Message, bot: Bot):
    """
    –¢–ï–°–¢–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.
    """
    if message.chat.type != ChatType.PRIVATE:
        return

    user_id = message.from_user.id

    # 1) –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        await bot.decline_chat_join_request(chat_id=settings.CHANNEL_ID, user_id=user_id)
    except Exception:
        pass

    # 2) –∫–∏–∫–Ω—É—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–∞–Ω/–∞–Ω–±–∞–Ω ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–π—Ç–∏ —Å–Ω–æ–≤–∞)
    kicked = False
    try:
        await bot.ban_chat_member(chat_id=settings.CHANNEL_ID, user_id=user_id)
        await bot.unban_chat_member(chat_id=settings.CHANNEL_ID, user_id=user_id)
        kicked = True
    except Exception:
        pass

    # 3) –æ—á–∏—Å—Ç–∫–∞ –ë–î (—Å tombstone –≤ subscriptions)
    try:
        affected = await _wipe_user_data(user_id)
    except Exception as e:
        affected = -1
        log.exception("wipe_me DB error:", e)

    # 4) –æ—Ç–≤–µ—Ç
    parts = []
    if kicked:
        parts.append("–í–∞—Å –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞–Ω–∞–ª—É.")
    if affected >= 0:
        parts.append(f"–î–∞–Ω—ñ —É –ë–î –æ—á–∏—â–µ–Ω–æ (—Ç–∞–±–ª–∏—Ü—å: {affected}).")
    else:
        parts.append("–ß–∞—Å—Ç–∏–Ω—É –¥–∞–Ω–∏—Ö –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è.")
    parts.append("–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É —â–µ —Ä–∞–∑: /buy")
    await message.answer("üßπ " + " ".join(parts))
