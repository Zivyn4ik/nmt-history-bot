from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timedelta, timezone, date
from typing import Optional

from aiogram import Bot
from aiogram.enums.chat_member_status import ChatMemberStatus
from sqlalchemy import select, update

from bot.db import Session, User, Subscription
from bot.config import settings, Subscription

import logging
log = logging.getLogger(__name__)

UTC = timezone.utc
now = lambda: datetime.now(UTC)


@dataclass
class SubInfo:
    status: str
    paid_until: datetime | None


async def ensure_user(tg_user) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç."""
    async with Session() as s:
        obj = await s.get(User, tg_user.id)
        if obj:
            if tg_user.username and obj.username != tg_user.username:
                obj.username = tg_user.username
                await s.commit()
        else:
            s.add(User(id=tg_user.id, username=tg_user.username))
            s.add(Subscription(user_id=tg_user.id, status="expired"))
            await s.commit()


def _tz_aware_utc(dt: Optional[datetime]) -> Optional[datetime]:
    """–°–¥–µ–ª–∞—Ç—å datetime timezone-aware (UTC)."""
    if dt is None:
        return None
    if dt.tzinfo is None:
        return dt.replace(tzinfo=UTC)
    return dt.astimezone(UTC)


async def get_subscription_status(user_id: int) -> SubInfo:
    """–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ paid_until (UTC-aware)."""
    async with Session() as s:
        sub = await s.get(Subscription, user_id)
        if not sub:
            sub = Subscription(user_id=user_id, status="expired")
            s.add(sub)
            await s.commit()
        return SubInfo(status=sub.status, paid_until=_tz_aware_utc(sub.paid_until))


async def update_subscription(user_id: int, **fields) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑—É—è –¥–∞—Ç—ã –≤ UTC)."""
    if "paid_until" in fields:
        fields["paid_until"] = _tz_aware_utc(fields["paid_until"])
    if "grace_until" in fields:
        fields["grace_until"] = _tz_aware_utc(fields["grace_until"])
    if "updated_at" in fields:
        fields["updated_at"] = _tz_aware_utc(fields["updated_at"])

    async with Session() as s:
        await s.execute(
            update(Subscription).where(Subscription.user_id == user_id).values(**fields)
        )
        await s.commit()


async def has_active_access(user_id: int) -> bool:
    """–ú–æ–∂–Ω–æ –ª–∏ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ (active –∏–ª–∏ grace)."""
    async with Session() as s:
        sub = await s.get(Subscription, user_id)
        if not sub:
            return False
        if sub.status not in {"active", "grace"}:
            return False

        paid_until = _tz_aware_utc(sub.paid_until)
        grace_until = _tz_aware_utc(sub.grace_until)

        if not paid_until:
            return False

        # –ø–æ–∫–∞ –Ω–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã grace
        return now() <= (grace_until or paid_until)


async def is_member_of_channel(bot: Bot, channel_id: int, user_id: int) -> bool:
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ."""
    try:
        m = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        return m.status in {
            ChatMemberStatus.OWNER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.MEMBER,
        }
    except Exception:
        return False


async def create_join_request_link(bot: Bot, user_id: int) -> str:
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ü–†–ê–í–ò–õ–¨–ù–£–Æ —Å—Å—ã–ª–∫—É: —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–Ω–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é).
    –î–µ–ª–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ª–∏–º–∏—Ç–æ–º 1 –∏ –∫–æ—Ä–æ—Ç–∫–∏–º TTL, —á—Ç–æ–±—ã –µ—ë –Ω–µ–ª—å–∑—è –±—ã–ª–æ ¬´—É—Ç—è–Ω—É—Ç—å¬ª.
    """
    # –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–Ω—è)
    expire_ts = int(now().timestamp()) + 3 * 24 * 60 * 60

    link_obj = await bot.create_chat_invite_link(
        chat_id=settings.CHANNEL_ID,
        name=f"joinreq-{user_id}-{int(now().timestamp())}",
        expire_date=expire_ts,          # –∏—Å—Ç–µ–∫–∞–µ—Ç –±—ã—Å—Ç—Ä–æ
        member_limit=1,                 # –Ω–µ –±–æ–ª–µ–µ 1 –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
        creates_join_request=True,      # –ö–õ–Æ–ß–ï–í–û–ï: –Ω—É–∂–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    )
    return link_obj.invite_link


async def activate_or_extend(bot: Bot, user_id: int) -> None:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å join-request —Å—Å—ã–ª–∫–æ–π.
    """
    async with Session() as s:
        sub = await s.get(Subscription, user_id)
        if not sub:
            sub = Subscription(user_id=user_id, status="expired")
            s.add(sub)
            await s.flush()

        current = now()
        base = _tz_aware_utc(sub.paid_until) if sub.paid_until else current
        if base < current:
            base = current

        new_until = base + timedelta(days=30)

        sub.status = "active"
        sub.paid_until = _tz_aware_utc(new_until)
        sub.grace_until = _tz_aware_utc(new_until + timedelta(days=3))
        sub.updated_at = current
        await s.commit()

    # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∞–ª join-request
    try:
        await bot.approve_chat_join_request(settings.CHANNEL_ID, user_id)
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å join-request —Å—Å—ã–ª–∫–æ–π
    try:
        invite = await create_join_request_link(bot, user_id)
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{new_until.date()}</b>.\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É:\n{invite}",
            parse_mode="HTML",
        )
    except Exception as e:
        log.warning("Cannot send subscription message to user %s: %s", user_id, e)



async def enforce_expirations(bot: Bot) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:
    - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è)
    - —Å—Ç–∞—Ç—É—Å grace –Ω–∞ 3 –¥–Ω—è
    - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ grace
    - –∑–∞—á–∏—Å—Ç–∫–∞ ¬´–ª–µ–≤—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    today = date.today()
    moment = now()

    async with Session() as s:
        res = await s.execute(select(Subscription))
        subs = res.scalars().all()

    for sub in subs:
        paid_until = _tz_aware_utc(sub.paid_until)
        grace_until = _tz_aware_utc(sub.grace_until)

        # --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è ---
        if (
            sub.status == "active"
            and paid_until
            and (paid_until - timedelta(days=3)).date() == today
            and sub.last_reminded_on != today
        ):
            try:
                await bot.send_message(
                    sub.user_id,
                    "‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –≤–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—ñ. "
                    "–ü—Ä–æ–¥–ª—ñ—Ç—å —ó—ó —á–µ—Ä–µ–∑ /buy.",
                )
            except Exception:
                pass
            await update_subscription(sub.user_id, last_reminded_on=today, updated_at=moment)

        # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è ---
        if (
            sub.status == "active"
            and paid_until
            and paid_until.date() == today
            and sub.last_reminded_on != today
        ):
            try:
                kb = {
                    "inline_keyboard": [
                        [{"text": "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "buy"}]
                    ]
                }
                await bot.send_message(
                    sub.user_id,
                    "‚è≥ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ. "
                    "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ó—ó —â–µ –Ω–∞ 30 –¥–Ω—ñ–≤.",
                    reply_markup=kb,
                )
            except Exception:
                pass
            await update_subscription(
                sub.user_id, last_reminded_on=today, status="grace", updated_at=moment
            )

        # --- –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ expired –ø–æ—Å–ª–µ grace ---
        if (
            sub.status in {"active", "grace"}
            and grace_until
            and moment > grace_until
        ):
            try:
                # —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.ban_chat_member(settings.CHANNEL_ID, sub.user_id)
                await bot.unban_chat_member(settings.CHANNEL_ID, sub.user_id)
            except Exception:
                pass
            await update_subscription(sub.user_id, status="expired", updated_at=moment)

    # --- –ß–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç ¬´–ª–µ–≤—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    try:
        members = await bot.get_chat_administrators(settings.CHANNEL_ID)
        admins = {m.user.id for m in members}

        for sub in subs:
            if sub.user_id in admins:
                continue  # –∞–¥–º–∏–Ω–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            if not await has_active_access(sub.user_id):
                try:
                    await bot.ban_chat_member(settings.CHANNEL_ID, sub.user_id)
                    await bot.unban_chat_member(settings.CHANNEL_ID, sub.user_id)
                except Exception:
                    pass
    except Exception:
        # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass


