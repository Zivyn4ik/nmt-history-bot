from __future__ import annotations

import time
import uuid
import hmac
import hashlib
import logging
from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, Any, List, Optional

import httpx

from ..config import settings
from ..services import activate_or_extend

log = logging.getLogger("bot.payments")
WFP_API = "https://api.wayforpay.com/api"


# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def money2(x: float | int | str) -> str:
    """
    –î–µ–Ω–µ–∂–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –°–¢–†–û–ö–û–ô —Ä–æ–≤–Ω–æ —Å 2 –∑–Ω–∞–∫–∞–º–∏: '100.00', '2.10', '2.00'
    """
    return str(Decimal(str(x)).quantize(Decimal("0.00"), rounding=ROUND_HALF_UP))


def hmac_md5_hex(message: str, secret: str) -> str:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è WayForPay: HMAC-MD5(message, key=secret)
    """
    return hmac.new(secret.strip().encode("utf-8"),
                    message.strip().encode("utf-8"),
                    hashlib.md5).hexdigest()


def make_base_signature_string(
    merchant: str,
    domain: str,
    order_ref: str,
    order_date: int,
    amount_str: str,      # —É–∂–µ money2()
    currency: str,
    product_name: str,
    product_count: int = 1,
    product_price_str: Optional[str] = None,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = amount_str
) -> str:
    """
    –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WayForPay:
    merchantAccount;merchantDomainName;orderReference;orderDate;amount;currency;productName;productCount;productPrice
    """
    if product_price_str is None:
        product_price_str = amount_str
    return (
        f"{merchant};{domain};{order_ref};{order_date};"
        f"{amount_str};{currency};{product_name};{product_count};{product_price_str}"
    )


# ---------- –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

async def create_invoice(
    user_id: int,
    amount: float,
    currency: str = "UAH",
    product_name: str = "Access to course (1 month)",
) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–≤–æ–π—Å WayForPay –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã.
    –ë—Ä–æ—Å–∞–µ—Ç RuntimeError –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑–∞
    order_date = int(time.time())
    order_ref = f"sub-{user_id}-{order_date}-{uuid.uuid4().hex[:6]}"

    merchant = settings.WFP_MERCHANT.strip()
    domain = settings.WFP_DOMAIN.strip()
    secret = settings.WFP_SECRET.strip()

    amt = money2(amount)  # '2.00'
    price = amt
    count = 1

    # –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è)
    base = make_base_signature_string(
        merchant=merchant,
        domain=domain,
        order_ref=order_ref,
        order_date=order_date,
        amount_str=amt,
        currency=currency,
        product_name=product_name,
        product_count=count,
        product_price_str=price,
    )
    signature = hmac_md5_hex(base, secret)

    payload = {
        "transactionType": "CREATE_INVOICE",
        "merchantAccount": merchant,
        "merchantDomainName": domain,
        "apiVersion": 1,
        "orderReference": order_ref,
        "orderDate": order_date,

        # –í–ê–ñ–ù–û: —Ç–µ –∂–µ —Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ base
        "amount": amt,                  # —Å—Ç—Ä–æ–∫–∞ '2.00'
        "currency": currency,
        "productName": [product_name],
        "productPrice": [price],        # —Å—Ç—Ä–æ–∫–∞ '2.00'
        "productCount": [count],        # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1

        "returnUrl": f"{settings.BASE_URL}/thanks",
        "serviceUrl": f"{settings.BASE_URL}/payments/wayforpay/callback",
        "merchantSignature": signature,
    }

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö Render
    print("üì§ WFP payload (no signature):", {k: v for k, v in payload.items() if k != "merchantSignature"})
    print("üîß base =", base)
    print("üîë signature =", signature)

    async with httpx.AsyncClient(timeout=25) as cli:
        try:
            r = await cli.post(WFP_API, json=payload)
            r.raise_for_status()
            data = r.json()
            print("üì• WFP response:", data)
        except Exception as e:
            log.exception("HTTP error while creating WFP invoice")
            raise RuntimeError(f"WayForPay HTTP error: {e}")

    # –£—Å–ø–µ—Ö ‚Äî –æ–¥–∏–Ω –∏–∑ URL –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    invoice_url = data.get("invoiceUrl") or data.get("formUrl") or data.get("url")
    if invoice_url:
        return invoice_url

    # –ß–∞—Å—Ç—ã–µ –∫–æ–¥—ã: 1109/1113/1133
    reason = data.get("reason", "")
    code = data.get("reasonCode")
    raise RuntimeError(f"WayForPay error: {code} ‚Äî {reason}")


def verify_callback_signature(_data: Dict[str, Any]) -> bool:
    """
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å callback'–∞.
    –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π WFP callback –ø—Ä–∏–Ω–∏–º–∞—é—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    –û—Å—Ç–∞–≤–ª—è–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–ª–∞—Ç—ã.
    """
    return True


async def process_callback(bot, data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç WayForPay.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ transactionStatus –∏ orderReference.
    """
    try:
        ok_sig = verify_callback_signature(data)
        if not ok_sig:
            print("‚ö†Ô∏è Callback signature failed:", data)
            return

        status = (data.get("transactionStatus") or data.get("status") or "").lower()
        order_ref = data.get("orderReference", "")
        print("‚úÖ WFP callback received:", status, order_ref)

        if not order_ref.startswith("sub-"):
            print("‚ÑπÔ∏è Skip non-subscription order:", order_ref)
            return

        if status in ("approved", "accept", "success"):
            # user_id –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ order_ref –≤–∏–¥–∞: "sub-{user_id}-{ts}-{rand}"
            try:
                user_id = int(order_ref.split("-")[1])
            except Exception:
                print("üö´ Cannot parse user_id from order_ref:", order_ref)
                return

            try:
                await activate_or_extend(bot, user_id)
                print("üéâ subscription activated/extended for", user_id)
            except Exception:
                log.exception("Failed to activate subscription for user %s (order %s)", user_id, order_ref)
        else:
            print("‚ÑπÔ∏è Non-success status:", status)

    except Exception:
        log.exception("Unhandled error in WFP callback handler")
