from __future__ import annotations

import logging
import uuid
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import delete

from bot.config import settings
from bot.db import Session, PaymentToken
from bot.payments.wayforpay import create_invoice

router = Router()
log = logging.getLogger("handlers.buy")


@router.message(Command("buy"))
async def cmd_buy(message: Message, bot: Bot):
    """
    –°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –∏–Ω–≤–æ–π—Å WayForPay –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç–∏".
    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã WFP –≤–µ—Ä–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ /wfp/return?token=<...> ‚Üí t.me/<bot>?start=<token>
    """
    user_id = message.from_user.id

    # 1) –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ pending-—Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã callback —Ç–æ—á–Ω–æ –º–µ—Ç–∏–ª –æ–¥–∏–Ω)
    try:
        async with Session() as session:
            await session.execute(
                delete(PaymentToken).where(
                    PaymentToken.user_id == user_id,
                    PaymentToken.status == "pending"
                )
            )
            await session.commit()
    except Exception:
        pass

    # 2) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π pending-—Ç–æ–∫–µ–Ω
    token = uuid.uuid4().hex
    try:
        async with Session() as session:
            session.add(PaymentToken(user_id=user_id, token=token, status="pending"))
            await session.commit()
        log.info("üîë Payment token created for user %s: %s", user_id, token)
    except Exception as e:
        log.exception("Failed to create payment token for user %s: %s", user_id, e)
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # 3) –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å WayForPay —Å returnUrl, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º token
    try:
        url = await create_invoice(
            user_id=user_id,
            amount=settings.PRICE,
            currency=settings.CURRENCY,
            product_name=getattr(settings, "PRODUCT_NAME", "Channel subscription (1 month)"),
            start_token=token,  # ‚¨ÖÔ∏è –ü–ï–†–ï–î–ê–Å–ú –¢–û–ö–ï–ù
        )
    except Exception as e:
        log.exception("Failed to create invoice for user %s: %s", user_id, e)
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫. –ü—Ä–∏—á–∏–Ω–∞: {e}")
        return

    # 4) –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç–∏"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏", url=url)]]
    )
    await message.answer(
        "–†–∞—Ö—É–Ω–æ–∫ –Ω–∞ 1 –º—ñ—Å—è—Ü—å —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û–ø–ª–∞—Ç–∏—Ç–∏¬ª.",
        reply_markup=kb
    )
