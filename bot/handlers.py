from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ChatJoinRequest,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.exceptions import TelegramBadRequest

from .config import settings
from .services import ensure_user, get_subscription_status, has_active_access

router = Router()


def _buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
    )


async def _is_member(bot: Bot, user_id: int) -> bool:
    """–§–∞–∫—Ç —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª '–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å'."""
    try:
        cm = await bot.get_chat_member(settings.CHANNEL_ID, user_id)
        return cm.status in ("member", "administrator", "creator")
    except TelegramBadRequest:
        return False
    except Exception:
        return False


@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. –ï—Å–ª–∏ –ë–î –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ –æ–ø–ª–∞—Ç—É, –Ω–æ —é–∑–µ—Ä —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ ‚Äî
    —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ –º—É—á–∞–µ–º –µ–≥–æ."""
    await ensure_user(message.from_user)
    uid = message.from_user.id

    sub = await get_subscription_status(uid)
    has_db_access = bool(getattr(sub, "status", None) == "active" and getattr(sub, "paid_until", None))

    if has_db_access:
        invite = getattr(settings, "TG_JOIN_REQUEST_URL", "")
        text = f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{sub.paid_until.date()}</b>."
        if invite:
            text += f"\n–Ø–∫—â–æ –≤–∏ —â–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ ‚Äî –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{invite}"
        await message.answer(text)
        return

    # Fallback: –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á–ª–µ–Ω –∫–∞–Ω–∞–ª–∞
    if await _is_member(bot, uid):
        await message.answer(
            "‚úÖ –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É (–≤–∏ —î –π–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–æ–º).\n"
            "–Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –±—É–ª–∞ —â–æ–π–Ω–æ ‚Äî —Å—Ç–∞—Ç—É—Å —É —Å–∏—Å—Ç–µ–º—ñ –æ–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
        )
        return

    # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤–æ–æ–±—â–µ
    await message.answer(
        "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=_buy_kb(),
    )


@router.chat_join_request(F.chat.id == settings.CHANNEL_ID)
async def on_join_request(event: ChatJoinRequest, bot: Bot):
    """–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É.
    –ò–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏."""
    uid = event.from_user.id
    if await has_active_access(uid):
        try:
            await bot.approve_chat_join_request(chat_id=settings.CHANNEL_ID, user_id=uid)
        except Exception:
            pass
    else:
        try:
            await bot.send_message(
                uid,
                "–©–æ–± —É–≤—ñ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É ‚Äî –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:",
                reply_markup=_buy_kb(),
            )
        except Exception:
            pass
