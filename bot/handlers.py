from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ChatJoinRequest,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from .config import settings
from .services import ensure_user, get_subscription_status, has_active_access

router = Router()

def _buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
    )

@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –∫—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ /buy."""
    await ensure_user(message.from_user)

    sub = await get_subscription_status(message.from_user.id)

    if getattr(sub, "status", None) == "active" and getattr(sub, "paid_until", None):
        invite = getattr(settings, "TG_JOIN_REQUEST_URL", "")
        text = f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{sub.paid_until.date()}</b>."
        if invite:
            text += f"\n–Ø–∫—â–æ –≤–∏ —â–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ ‚Äî –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{invite}"
        await message.answer(text)
    else:
        await message.answer(
            "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=_buy_kb(),
        )

@router.chat_join_request(F.chat.id == settings.CHANNEL_ID)
async def on_join_request(event: ChatJoinRequest, bot: Bot):
    """–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –∞–ø—Ä—É–≤–∏–º. –ò–Ω–∞—á–µ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏."""
    uid = event.from_user.id
    if await has_active_access(uid):
        try:
            await bot.approve_chat_join_request(chat_id=settings.CHANNEL_ID, user_id=uid)
        except Exception:
            pass
    else:
        try:
            await bot.send_message(
                uid,
                "–©–æ–± —É–≤—ñ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É ‚Äî –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:",
                reply_markup=_buy_kb(),
            )
        except Exception:
            pass
