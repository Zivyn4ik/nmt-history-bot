# bot/handlers.py
from __future__ import annotations

from datetime import datetime, timezone
from aiogram import Router, Bot
from aiogram.types import ChatJoinRequest, InlineKeyboardMarkup, InlineKeyboardButton

from .config import settings
from .services import get_subscription_status

router = Router()

def _buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_open")]
    ])

@router.chat_join_request()
async def on_chat_join_request(event: ChatJoinRequest, bot: Bot):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à –∫–∞–Ω–∞–ª
    if event.chat.id != settings.CHANNEL_ID:
        return

    user_id = event.from_user.id
    now = datetime.now(timezone.utc)
    sub = await get_subscription_status(user_id)

    is_paid_now = bool(
        sub and sub.status == "active" and sub.paid_until and now <= sub.paid_until
    )

    if is_paid_now:
        try:
            await bot.approve_chat_join_request(settings.CHANNEL_ID, user_id)
        except Exception:
            pass
        return

    # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –æ—Ç–∫–ª–æ–Ω—è–µ–º –∏ —à–ª—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    try:
        await bot.decline_chat_join_request(settings.CHANNEL_ID, user_id)
    except Exception:
        pass
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞—î—Ç—å—Å—è –ª–∏—à–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—é –ø—ñ–¥–ø–∏—Å–∫–æ—é.\n\n–û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É —ñ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ:",
            reply_markup=_buy_kb(),
        )
    except Exception:
        pass
