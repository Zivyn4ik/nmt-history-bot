from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

from bot.config import settings
from bot.services import get_subscription_status, is_member_of_channel, ensure_user
from bot.handlers_buy import cmd_buy  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_buy –∏–∑ handlers_buy

router = Router()

# --- keyboards ---------------------------------------------------------------

def buy_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")],
        ]
    )

# --- callbacks ---------------------------------------------------------------

@router.callback_query(F.data == "check_status")
async def on_check_status(cb: CallbackQuery, bot: Bot):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º TZ —ñ —Ñ–æ–ª–±–µ–∫–æ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª—ñ."""
    await cb.answer()
    user_id = cb.from_user.id

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user –≤ –±–∞–∑–µ –µ—Å—Ç—å (–æ–±–Ω–æ–≤–∏–º username –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await ensure_user(cb.from_user)

    sub = await get_subscription_status(user_id)

    from datetime import datetime, timezone
    now = datetime.now(timezone.utc)

    def _tz_aware(dt):
        if dt is None:
            return None
        return dt if dt.tzinfo is not None else dt.replace(tzinfo=timezone.utc)

    paid_until = _tz_aware(getattr(sub, "paid_until", None))
    status = getattr(sub, "status", None)

    active_by_db = bool(
        sub is not None
        and status == "active"
        and paid_until is not None
        and now <= paid_until
    )

    in_channel = await is_member_of_channel(bot, settings.CHANNEL_ID, user_id)

    if active_by_db:
        text = "‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n–î–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É –Ω–∞–¥–∞–Ω–æ –¥–æ: <b>{}</b>".format(
            paid_until.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
        )
        await cb.message.answer(text, parse_mode="HTML")
        return

    if in_channel:
        text = (
            "‚ÑπÔ∏è –í–∏ –∑–∞—Ä–∞–∑ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É (–∑–∞ —Ñ–∞–∫—Ç–æ–º —á–ª–µ–Ω—Å—Ç–≤–∞), "
            "–∞–ª–µ –≤ –æ–±–ª—ñ–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é.\n\n"
            "–Ø–∫—â–æ –≤–∏ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É¬ª, "
            "—â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂."
        )
        await cb.message.answer(text, reply_markup=buy_kb())
        return

    await cb.message.answer(
        "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=buy_kb(),
    )


@router.callback_query(F.data == "buy")
async def cb_buy(call: CallbackQuery, bot: Bot):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ inline-–∫–Ω–æ–ø–∫–µ 'buy' –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ç –∂–µ flow, —á—Ç–æ –∏ /buy.
    –ü–µ—Ä–µ–¥–∞—ë–º –≤ cmd_buy Message –∏ Bot.
    """
    # cmd_buy –æ–∂–∏–¥–∞–µ—Ç Message –∏ Bot
    await cmd_buy(call.message, bot)
