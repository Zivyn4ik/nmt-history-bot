# bot/handlers_start.py
from __future__ import annotations

import logging
from datetime import datetime, timezone
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from .config import settings
from .services import get_subscription_status, is_member_of_channel, ensure_user

log = logging.getLogger("handlers_start")
router = Router()

def main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_open")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏", callback_data="check_status")],
    ])

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await ensure_user(message.from_user)
    await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_kb())

def buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_open")]
    ])

@router.callback_query(F.data == "check_status")
async def on_check_status(cb: CallbackQuery, bot: Bot):
    user_id = cb.from_user.id

    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´—á–∞—Å–∏–∫–æ–≤¬ª
    try:
        await cb.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é‚Ä¶", cache_time=1, show_alert=False)
    except Exception:
        pass

    try:
        now = datetime.now(timezone.utc)
        sub = await get_subscription_status(user_id)

        def _fmt(dt):
            return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M UTC") if dt else "‚Äî"

        active = bool(sub and sub.status == "active" and sub.paid_until and now <= sub.paid_until)

        if active:
            await cb.message.answer(f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n–î–æ—Å—Ç—É–ø –¥–æ: <b>{_fmt(sub.paid_until)}</b>", parse_mode="HTML")
            return

        in_channel = await is_member_of_channel(bot, settings.CHANNEL_ID, user_id)
        if in_channel:
            await cb.message.answer(
                "‚ÑπÔ∏è –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É (–∑–∞ —Ñ–∞–∫—Ç–æ–º —á–ª–µ–Ω—Å—Ç–≤–∞), –∞–ª–µ –≤ –æ–±–ª—ñ–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. "
                "–Ø–∫—â–æ –≤–∏ —â–æ–π–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É¬ª.",
                reply_markup=buy_kb(),
            )
            return

        await cb.message.answer(
            "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=buy_kb(),
        )

    except Exception as e:
        log.exception("check_status failed for %s: %s", user_id, e)
        try:
            await cb.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception:
            pass
