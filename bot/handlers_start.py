from __future__ import annotations

import logging
import os
import asyncio
from urllib.parse import urlparse
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from starlette.responses import JSONResponse, HTMLResponse

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.exceptions import TelegramRetryAfter

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import select

from bot.db import Session, Payment
from bot.config import settings
from bot.db import init_db
from bot.handlers_start import router as start_router
from bot.handlers import router as handlers_router
from bot.handlers_wipe import router as wipe_router
from bot.handlers_buy import router as buy_router
from bot.services import enforce_expirations
from bot.payments.wayforpay import process_callback

log = logging.getLogger("app")

# ---------------- Aiogram ----------------
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
BOT_USERNAME: str | None = None   # üîπ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏–º username
dp = Dispatcher()

# –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–ø–µ—Ä–≤–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start_router)
dp.include_router(handlers_router)
dp.include_router(wipe_router)
dp.include_router(buy_router)


# ---------------- FastAPI ----------------
@asynccontextmanager
async def lifespan(app: FastAPI):
    global BOT_USERNAME

    # --- startup ---
    await init_db()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    try:
        base = normalize_base_url(settings.BASE_URL)
        webhook_url = f"{base}/telegram/webhook"

        info = await bot.get_webhook_info()
        if info.url != webhook_url:
            try:
                await bot.set_webhook(webhook_url)
                log.info("Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", webhook_url)
            except TelegramRetryAfter as e:
                log.warning("Flood control, retry —á–µ—Ä–µ–∑ %s —Å–µ–∫—É–Ω–¥", e.retry_after)
                await asyncio.sleep(e.retry_after)
                await bot.set_webhook(webhook_url)
        else:
            log.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: %s", e)

    # üîπ –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è —Å—Å—ã–ª–æ–∫ —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
    try:
        me = await bot.get_me()
        BOT_USERNAME = me.username
        log.info("ü§ñ BOT_USERNAME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @%s", BOT_USERNAME)
    except Exception as e:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞: %s", e)

    # Scheduler
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(enforce_expirations, CronTrigger(hour=9, minute=0), kwargs={"bot": bot})
    scheduler.add_job(enforce_expirations, CronTrigger(hour="*/6"), kwargs={"bot": bot})
    scheduler.start()
    log.info("Scheduler –∑–∞–ø—É—â–µ–Ω: –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")

    # --- –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ---
    yield

    # --- shutdown ---
    await bot.session.close()


app = FastAPI(title="TG Subscription Bot", lifespan=lifespan)


# ---------- helpers ----------
def normalize_base_url(u: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç https:// –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —É–±–∏—Ä–∞–µ—Ç —Ö–≤–æ—Å—Ç–æ–≤–æ–π —Å–ª—ç—à."""
    u = (u or "").strip()
    if not urlparse(u).scheme:
        u = "https://" + u
    return u.rstrip("/")


# ---------- routes ----------
@app.get("/")
async def root():
    return {"ok": True}


@app.get("/healthz")
async def healthz():
    return {"ok": True}


@app.api_route("/thanks", methods=["GET", "POST", "HEAD"])
async def thanks_page():
    return HTMLResponse(f"""
    <html>
    <head>
        <title>–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</title>
        <style>
            body {{ background-color: #111; color: #eee; font-family: sans-serif; text-align: center; padding-top: 100px; }}
            a {{ color: #4cc9f0; font-size: 18px; }}
        </style>
    </head>
    <body>
        <h2>‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!</h2>
        <p>–ë–æ—Ç —â–æ–π–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram üì©</p>
        <p>–í—ñ–¥–∫—Ä–∏–π—Ç–µ —á–∞—Ç –∑ –±–æ—Ç–æ–º, —â–æ–± —É–≤—ñ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É.</p>
    </body>
    </html>
    """)

@app.api_route("/wfp/return", methods=["GET", "POST", "HEAD"])
async def wfp_return(request: Request):
    """
    WayForPay —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—é–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:
      1) returnUrl –±—ã–ª —Å ?token=<token> -> –≤ –∑–∞–ø—Ä–æ—Å–µ –±—É–¥–µ—Ç token
         ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ paid –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ t.me/<bot>?start=<token>
      2) –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª orderReference ‚Äî –∏—â–µ–º Payment –ø–æ order_ref,
         –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π pending token –¥–ª—è pay.user_id –∏ –ø–æ–º–µ—á–∞–µ–º paid,
         –¥–∞–ª–µ–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ t.me/<bot>?start=<token>
    """
    from bot.db import PaymentToken  # –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤ –∏–º–ø–æ—Ä—Ç–∞

    # 1) token-first flow (create_invoice –¥–æ–±–∞–≤–ª—è–µ—Ç ?token=...)
    token = request.query_params.get("token")
    if token:
        async with Session() as s:
            res = await s.execute(select(PaymentToken).where(PaymentToken.token == token))
            token_obj = res.scalar_one_or_none()
            if not token_obj:
                return HTMLResponse("<h2>‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>", status_code=404)

            # –ø–æ–º–µ—á–∞–µ–º paid (–µ—Å–ª–∏ –µ—â—ë pending)
            if token_obj.status == "pending":
                token_obj.status = "paid"
                await s.commit()

        if not BOT_USERNAME:
            return HTMLResponse("<h2>‚ö†Ô∏è BOT_USERNAME –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</h2>", status_code=500)
        return RedirectResponse(f"https://t.me/{BOT_USERNAME}?start={token}")

    # 2) orderReference flow
    order_ref = request.query_params.get("orderReference") or request.query_params.get("orderReference[]")
    if not order_ref:
        return HTMLResponse("<h2>‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ orderReference</h2>", status_code=400)

    async with Session() as s:
        # –∏—â–µ–º Payment
        res = await s.execute(select(Payment).where(Payment.order_ref == order_ref))
        pay = res.scalar_one_or_none()
        if not pay:
            return HTMLResponse("<h2>‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>", status_code=404)

        # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π pending token –¥–ª—è —ç—Ç–æ–≥–æ user_id
        res = await s.execute(
            select(PaymentToken)
            .where(PaymentToken.user_id == pay.user_id)
            .order_by(PaymentToken.created_at.desc())
        )
        token_obj = res.scalar_one_or_none()
        if not token_obj:
            return HTMLResponse("<h2>‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</h2>", status_code=404)

        if token_obj.status == "pending":
            token_obj.status = "paid"
            await s.commit()

    if not BOT_USERNAME:
        return HTMLResponse("<h2>‚ö†Ô∏è BOT_USERNAME –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</h2>", status_code=500)

    return RedirectResponse(f"https://t.me/{BOT_USERNAME}?start={token_obj.token}")


@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})


@app.post("/payments/wayforpay/callback")
async def wayforpay_callback(req: Request):
    try:
        data = await req.json()
    except Exception:
        data = {}
    await process_callback(bot, data)
    return {"ok": True}
