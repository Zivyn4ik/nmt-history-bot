from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from bot.config import settings
from bot.services import ensure_user, get_subscription_status
from bot.handlers_buy import cmd_buy
from bot.db import Session, PaymentToken

router = Router()

# --- Keyboards ---
def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏", callback_data="check_status")],
        [InlineKeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", url="https://t.me/zivyn4ik")],
    ])

def _buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")]
    ])

# --- /start ---
@router.message(CommandStart())
async def start_handler(message: Message):
    user = message.from_user
    await ensure_user(user)

    text = (
        "üëã <b>–í—ñ—Ç–∞—î–º–æ —É –Ω–∞–≤—á–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ HMT 2026 | –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏!</b>\n\n"
        "üìö –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ:\n"
        "‚Ä¢ –¢–∞–±–ª–∏—Ü—å –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢\n"
        "‚Ä¢ –¢–µ—Å—Ç—ñ–≤ —Ç–∞ –∑–∞–≤–¥–∞–Ω—å –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ –ö–æ—Ä–∏—Å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤\n\n"
        "üß≠ –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ."
    )
    await message.answer(text, reply_markup=_main_menu_kb())

# --- Callbacks ---
@router.callback_query(F.data == "buy")
async def cb_buy(call: CallbackQuery, bot: Bot):
    await cmd_buy(call.message, bot)

@router.callback_query(F.data == "check_status")
async def cb_check(call: CallbackQuery):
    await call.answer()
    user = call.from_user
    await ensure_user(user)

    sub = await get_subscription_status(user.id)
    if sub.status == "active" and sub.paid_until:
        remaining_days = (sub.paid_until.date() - date.today()).days
        await call.message.answer(
            f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: <b>{remaining_days}</b>.\n"
            f"–Ø–∫—â–æ —â–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ ‚Äî –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{settings.TG_JOIN_REQUEST_URL}"
        )
    else:
        await call.message.answer(
            "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=_buy_kb(),
        )
