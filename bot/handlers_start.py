from __future__ import annotations

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from bot.config import settings
from bot.services import ensure_user, activate_or_extend
from bot.handlers_buy import cmd_buy
from bot.db import Session, PaymentToken

import asyncio

router = Router()

# --- Keyboards ---
def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏", callback_data="check_status")],
        [InlineKeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", url="https://t.me/zivyn4ik")],
    ])

def _buy_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy")]
    ])

# --- Polling —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def wait_for_payment_and_activate(bot: Bot, user_id: int, token: str, timeout: int = 35):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ —Å–µ–∫—É–Ω–¥—É —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω–∞.
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    message = await bot.send_message(user_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ‚Ä¶")

    start_time = asyncio.get_event_loop().time()
    while asyncio.get_event_loop().time() - start_time < timeout:
        async with Session() as s:
            res = await s.execute(select(PaymentToken).where(PaymentToken.token == token))
            token_obj = res.scalar_one_or_none()

            if token_obj and token_obj.status == "paid":
                token_obj.used = True
                await s.commit()

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await activate_or_extend(bot, user_id)

                await message.delete()
                return True
        await asyncio.sleep(1)

    await message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –∑–∞ 35 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return False

# --- /start ---
@router.message(CommandStart())
async def start_handler(message: Message, bot: Bot):
    user = message.from_user
    await ensure_user(user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à—ë–ª –ª–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ start parameter
    token = getattr(message, "start_param", None)
    if token:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ polling
        asyncio.create_task(wait_for_payment_and_activate(bot, user.id, token))
        await message.answer(
            "üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. "
            "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª‚Ä¶"
        )

    text = (
        "üëã <b>–í—ñ—Ç–∞—î–º–æ —É –Ω–∞–≤—á–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ HMT 2026 | –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏!</b>\n\n"
        "üìö –¢—É—Ç –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ:\n"
        "‚Ä¢ –¢–∞–±–ª–∏—Ü—å –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢\n"
        "‚Ä¢ –¢–µ—Å—Ç—ñ–≤ —Ç–∞ –∑–∞–≤–¥–∞–Ω—å –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏\n"
        "‚Ä¢ –ö–æ—Ä–∏—Å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤\n\n"
        "üß≠ –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ."
    )
    await message.answer(text, reply_markup=_main_menu_kb())

# --- Callbacks ---
@router.callback_query(F.data == "buy")
async def cb_buy(call: CallbackQuery, bot: Bot):
    await cmd_buy(call.message, bot)

@router.callback_query(F.data == "check_status")
async def cb_check(call: CallbackQuery, bot: Bot):
    await call.answer()
    user = call.from_user
    await ensure_user(user)

    from bot.services import get_subscription_status
    sub = await get_subscription_status(user.id)

    from datetime import datetime, timezone
    now = datetime.now(timezone.utc)

    if sub.status == "active" and sub.paid_until and now <= sub.paid_until:
        remaining = sub.paid_until - now
        days_left = remaining.days
        hours_left = remaining.seconds // 3600
        minutes_left = (remaining.seconds % 3600) // 60
        text = f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left}–¥ {hours_left}–≥ {minutes_left}—Ö–≤."
        invite = getattr(settings, "TG_JOIN_REQUEST_URL", "")
        if invite:
            text += f"\n–©–æ–± —É–≤—ñ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{invite}"
        await call.message.answer(text)
    else:
        await call.message.answer(
            "‚ùå –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=_buy_kb(),
        )
